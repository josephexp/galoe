{"version":3,"sources":["ParticleComponent.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["params","particles","number","value","density","enable","value_area","color","shape","type","stroke","width","polygon","nb_sides","image","src","height","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","bubble","duration","repulse","push","particles_nb","remove","retina_detect","style","position","top","left","display","wrapperStyles","maxWidth","margin","Map","state","center","zoom","cities","name","coordinates","gmt","handleCitySelection","evt","cityId","target","getAttribute","changeTime","props","city","setState","handleReset","this","map","i","key","className","data-city","onClick","projectionConfig","scale","geography","geographies","projection","id","default","fill","strokeWidth","outline","hover","pressed","marker","cx","cy","r","Component","App","time","moment","utc","format","date","country","updateTime","add","setInterval","ParticleComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d46e631.chunk.js","sourcesContent":["import React from \"react\";\nimport Particles from \"react-particles-js\";\n\nexport default () => (\n    <Particles\n      params={{\n        particles: {\n          number: {\n            value: 150,\n            density: {\n              enable: true,\n              value_area: 1803.4120608655228\n            }\n          },\n          color: {\n            value: \"#ffffff\"\n          },\n          shape: {\n            type: \"circle\",\n            stroke: {\n              width: 2,\n              color: \"#000000\"\n            },\n            polygon: {\n              nb_sides: 4\n            },\n            image: {\n              src: \"img/github.svg\",\n              width: 100,\n              height: 100\n            }\n          },\n          opacity: {\n            value: 0.4008530152163807,\n            random: false,\n            anim: {\n              enable: false,\n              speed: 1,\n              opacity_min: 0.1,\n              sync: false\n            }\n          },\n          size: {\n            value: 1.5,\n            random: true,\n            anim: {\n              enable: false,\n              speed: 40,\n              size_min: 0.1,\n              sync: false\n            }\n          },\n          line_linked: {\n            enable: true,\n            distance: 0,\n            color: \"#ffffff\",\n            opacity: 0.3687847739990702,\n            width: 0.6413648243462091\n          },\n          move: {\n            enable: true,\n            speed: 6,\n            direction: \"none\",\n            random: false,\n            straight: false,\n            out_mode: \"out\",\n            bounce: false,\n            attract: {\n              enable: false,\n              rotateX: 600,\n              rotateY: 1200\n            }\n          }\n        },\n        interactivity: {\n          detect_on: \"window\",\n          events: {\n            onhover: {\n              enable: true,\n              mode: \"repulse\"\n            },\n            onclick: {\n              enable: false,\n              mode: \"bubble\"\n            },\n            resize: true\n          },\n          modes: {\n            grab: {\n              distance: 400,\n              line_linked: {\n                opacity: 1\n              }\n            },\n            bubble: {\n              distance: 400,\n              size: 40,\n              duration: 2,\n              opacity: 8,\n              speed: 3\n            },\n            repulse: {\n              distance: 100,\n              duration: 0.4\n            },\n            push: {\n              particles_nb: 4\n            },\n            remove: {\n              particles_nb: 2\n            }\n          }\n        },\n        retina_detect: true\n      }}\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        display: 'flex',\n        \n      }}\n    />\n);\n","import React, { Component } from \"react\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Markers,\n  Marker\n} from \"react-simple-maps\";\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\"\n};\n\nclass Map extends Component {\n  state = {\n    center: [0, 20],\n    zoom: 1,\n    cities: [\n      { name: \"Zurich\", coordinates: [8.5417, 47.3769], gmt: 2 },\n      { name: \"Singapore\", coordinates: [103.8198, 1.3521], gmt: 8 },\n      { name: \"San Francisco\", coordinates: [-122.4194, 37.7749], gmt: -7 },\n      { name: \"Sydney\", coordinates: [151.2093, -33.8688], gmt: 10 },\n      { name: \"Lagos\", coordinates: [3.3792, 6.5244], gmt: 1 },\n      { name: \"India\", coordinates: [75.7410984, 19.0825223], gmt: 5.5 },\n      { name: \"Shanghai\", coordinates: [121.4737, 31.2304], gmt: 8 },\n      { name: \"Tokyo\", coordinates: [139.42, 35.41], gmt: 9 },\n      { name: \"Moscow\", coordinates: [37.37, 55.45], gmt: 3 },\n      { name: \"Columbia\", coordinates: [-76.861046, 39.203712], gmt: -4 },\n      { name: \"Santiago\", coordinates: [-70.64827, -33.45694], gmt: -3 }\n    ]\n  };\n\n  handleCitySelection = evt => {\n    const cityId = evt.target.getAttribute(\"data-city\");\n    const { changeTime } = this.props;\n    const city = this.state.cities[cityId];\n    this.setState({\n      center: city.coordinates,\n      zoom: 2\n    });\n    changeTime(city.name, city.gmt);\n  };\n  \n  handleReset = () => {\n    const { changeTime } = this.props;\n    this.setState({\n      center: [0, 20],\n      zoom: 1\n    });\n    changeTime(\"UTC\", 0);\n  };\n\n  render() {\n    return (\n      <div>\n        <div style={wrapperStyles}>\n          {this.state.cities.map((city, i) => (\n            <button\n              key={i}\n              className=\"btn px1\"\n              data-city={i}\n              onClick={this.handleCitySelection}\n            >\n              {city.name}\n            </button>\n          ))}\n          <button onClick={this.handleReset}>{\"Reset\"}</button>\n        </div>\n        <div style={wrapperStyles}>\n          <ComposableMap\n            projectionConfig={{\n              scale: 205\n            }}\n            width={980}\n            height={551}\n            style={{\n              width: \"100%\",\n              height: \"auto\"\n            }}\n          >\n            <ZoomableGroup center={this.state.center} zoom={this.state.zoom}>\n              <Geographies geography=\"https://unpkg.com/world-atlas@1.1.4/world/50m.json\">\n                {(geographies, projection) =>\n                  geographies.map(\n                    (geography, i) =>\n                      geography.id !== \"ATA\" && (\n                        <Geography\n                          key={i}\n                          geography={geography}\n                          projection={projection}\n                          style={{\n                            default: {\n                              fill: \"#ECEFF1\",\n                              stroke: \"#607D8B\",\n                              strokeWidth: 0.75,\n                              outline: \"none\"\n                            },\n                            hover: {\n                              fill: \"#607D8B\",\n                              stroke: \"#607D8B\",\n                              strokeWidth: 0.75,\n                              outline: \"none\"\n                            },\n                            pressed: {\n                              fill: \"#FF5722\",\n                              stroke: \"#607D8B\",\n                              strokeWidth: 0.75,\n                              outline: \"none\"\n                            }\n                          }}\n                        />\n                      )\n                  )\n                }\n              </Geographies>\n              <Markers>\n                {this.state.cities.map((city, i) => (\n                  <Marker key={i} marker={city}>\n                    <circle\n                      cx={0}\n                      cy={0}\n                      r={6}\n                      fill=\"#FF5722\"\n                      stroke=\"#DF3702\"\n                    />\n                  </Marker>\n                ))}\n              </Markers>\n            </ZoomableGroup>\n          </ComposableMap>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React, { Fragment, Component } from \"react\";\nimport \"./App.css\";\nimport ParticleComponent from \"./ParticleComponent\";\nimport Map from \"./Map\";\nimport moment from \"moment\";\n\nclass App extends Component {\n  state = {\n    time: moment()\n      .utc()\n      .format(\"LTS\"),\n    date: moment().format(\"LL\"),\n    country: \"UTC\",\n    gmt: 0\n  };\n\n  updateTime = () => {\n    this.setState({\n      time: moment()\n        .utc()\n        .add(this.state.gmt, \"hours\")\n        .format(\"LTS\"),\n      country: this.state.country,\n      date: moment().format(\"LL\")\n    });\n  };\n\n  componentDidMount() {\n    setInterval(this.updateTime, 1000);\n  }\n\n  changeTime = (name, gmt) => {\n    this.setState({\n      gmt: gmt,\n      country: name,\n      time: moment()\n        .utc()\n        .add(gmt, \"hours\")\n        .format(\"LTS\"),\n      date: moment().format(\"LL\")\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"main\">\n          <div className=\"particle-component\">\n            <ParticleComponent />\n          </div>\n          <div className=\"counter\">\n            <Map changeTime={this.changeTime} />\n            <h2 className=\"counter-text\">\n              {this.state.time + \" (\" + this.state.country + \")\"}\n            </h2>\n            <h5 className=\"counter-text\">{this.state.date}</h5>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}